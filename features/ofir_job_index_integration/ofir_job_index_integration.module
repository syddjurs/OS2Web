<?php
/**
 * @file
 * Code for the Ofir job index integration feature.
 */

include_once 'ofir_job_index_integration.features.inc';

/**
 * Implements hook_menu().
 */
function ofir_job_index_integration_menu() {
  $items = array();
  $items['admin/config/ofir_job_index_integration'] = array(
    'title' => 'OS2web ofir job settings',
    'description' => 'General settings for ofir job import, fx, modify WSDL and syncronization time',
    'position' => 'right',
    'weight' => -10,
    'page callback' => 'system_admin_menu_block_page',
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
    'access arguments' => array('administer site configuration'),
  );

  $items['admin/config/ofir_job_index_integration/settings'] = array(
    'title' => 'OS2web ofir job Settings',
    'description' => 'General settings for the OS2Web ofir job',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ofir_job_index_integration_settings_form'),
    'access arguments' => array('administer site configuration'),
  );

  return $items;
}

/**
 * Implements hook_form().
 */
function ofir_job_index_integration_settings_form() {
  $form['ofir_job_index_integration_webservice'] = array(
    '#type' => 'textfield',
    '#title' => t('Ofir job Webservice URL'),
    '#default_value' => variable_get('ofir_job_index_integration_webservice', 'https://syddjurs.emply.net/api.asmx?WSDL'),
    '#size' => 100,
    '#maxlength' => 200,
  );
  $form['ofir_job_index_integration_apiKey'] = array(
    '#type' => 'textfield',
    '#title' => t('Ofir job API-nøgle'),
    '#default_value' => variable_get('ofir_job_index_integration_apiKey', '4dccbf6d-5e82-4303-89bd-0322ce8f2c30'),
    '#size' => 100,
    '#maxlength' => 130,
  );
  $form['ofir_job_index_integration_mediaId'] = array(
    '#type' => 'textfield',
    '#title' => t('Ofir job Medie ID'),
    '#default_value' => variable_get('ofir_job_index_integration_mediaId', '537a7324-00fa-42c1-822d-d0256092ddb9'),
    '#size' => 100,
    '#maxlength' => 130,
  );
  $import_options = array(
    '1' => t('Hver time'),
    '3' => t('Hver 3 timer'),
    '6' => t('Hver 6 timer'),
    '12' => t('Hver 12 timer'),
    '24' => t('Hver dag'),
  );
  $import_options[0] = t('Aldrig (Import manuelt)');
  $form['ofir_job_index_integration_import_period'] = array(
    '#type' => 'select',
    '#title' => t('Periodisk import'),
    '#description' => t('Vælg, hvor ofte en kilde skal importeres jævne'),
    '#options' => $import_options,
    '#default_value' => variable_get('ofir_job_index_integration_import_period', 3),
  );
  return system_settings_form($form);
}

/**
 * Implements hook_cron().
 */
function ofir_job_index_integration_cron() {
  $cron_settings_time = variable_get('ofir_job_index_integration_import_period', 3);
  $last_run = variable_get('ofir_job_index_integration_last_import', strtotime('1970-01-01 00:00:00'));

  // Then we can find out if it is time for our cron-job to run.
  if ($cron_settings_time) {
    $this_run = time();
    // Is it time for import ofir jobs.
    if ($this_run > ($last_run + 60 * 60 * $cron_settings_time)) {
      // Run the cronbatch.
      _ofir_job_index_integration_cronbatch();
    }
  }
}

/**
 * Function _ofir_job_index_integration_cronbatch().
 */
function _ofir_job_index_integration_cronbatch() {
  // First we determine the time for our last check for new updates.
  $this_run = time();
  $last_run = variable_get('ofir_job_index_integration_last_import', time());
  $updated_after = date('Y-m-d\TH\:i\:s', $last_run);

  // Get jobs.
  $jobs = array();
  $wsdl = variable_get('ofir_job_index_integration_webservice', 'https://syddjurs.emply.net/api.asmx?WSDL');
  $api_key = variable_get('ofir_job_index_integration_apiKey', '4dccbf6d-5e82-4303-89bd-0322ce8f2c30');
  $media_id = variable_get('ofir_job_index_integration_mediaId', '537a7324-00fa-42c1-822d-d0256092ddb9');
  $jobs = _ofir_job_index_integration_GetProjects($wsdl, $api_key, $media_id);

  // We must check if the webservice throws ANY errors.
  $any_webservice_errors = FALSE;

  $count = 0;
  // For each of the inexistent jobs we import them.
  foreach ($jobs as $job) {
    if ($job == 'error_code' || $job == 'error_string') {
      $any_webservice_errors = TRUE;
      continue;
    }
    if (_ofir_job_index_integration_check_existed($job)) {
      continue;
    }
    $job_text = _ofir_job_index_integration_parse_job_text($job);
    ofir_job_index_integration_import_job($job_text);
    $count++;
  }

  // Now we must update the "last_updated" variable.
  // But only if no errors were encountered.
  if (!$any_webservice_errors) {
    variable_set('ofir_job_index_integration_last_import', $this_run);
    $updated_at = date('Y-m-d\TH\:i\:s', $this_run);
    $msg = '%count Ofir jobs imported succesfully at: %success';
    watchdog('OS2web Ofir job', $msg, $variables = array('%count' => $count, '%success' => $updated_at));
  }
  else {
    $should_have_been = date('Y-m-d\TH\:i\:s', $this_run);
    $msg = 'OS2web Ofir job threw errors while import at: %runtime. Not all jobs have been import. Last succesful automated import was at: %success';

    watchdog('OS2web Borger.dk', $msg, $variables = array(
      '%runtime' => $should_have_been,
      '%success' => $updated_after)
    );
  }
}

/**
 * Create ofir job node.
 */
function ofir_job_index_integration_import_job($job_text) {
  if (!empty($job_text)) {
    $node = new stdClass();
    $created = !empty($job_text['published']) ? strtotime($job_text['published']) : REQUEST_TIME;
    $created = strtotime($created);
    $node->created = $created;
    $node->validated = TRUE;
    $node->uid = 1;
    $node->language = 'da';
    // Insert default value of a new node.
    $node->type = 'ofir_job';
    $node->title = (!empty($job_text['title'])) ? $job_text['title'] : '';

    $text = !empty($job_text['description']) ? $job_text['description'] : '';

    $text .= !empty($job_text['department_name']) ? '<br /><strong>Afdeling : </strong>' . $job_text['department_name'] : '';
    $text .= !empty($job_text['category']) ? '<br /><strong>Stillingskategori : </strong>' . $job_text['category'] : '';
    $text .= !empty($job_text['contact_person']) ? '<br /><strong>Kontaktperson : </strong>' . $job_text['contact_person'] : '';
    $text .= !empty($job_text['contact_no']) ? '<br /><strong>Telefon : </strong>' . $job_text['contact_no'] : '';
    $open_link = "'" . $job_text['apply_link'] . "'";
    $text .= !empty($job_text['apply_link']) ? '<br /><input type="button" value="Send ansøgning" onclick="window.open(' . $open_link . ');">' : '';

    $node->field_text['und'][0]['value'] = $text;
    $node->field_text['und'][0]['safe_value'] = $text;
    $node->field_text['und'][0]['format'] = 'full_html';

    $node->field_ofir_job_ad_id['und'][0]['value'] = (!empty($job_text['ad_id'])) ? $job_text['ad_id'] : '';
    $node->field_ofir_job_ad_id['und'][0]['safe_value'] = (!empty($job_text['ad_id'])) ? $job_text['ad_id'] : '';

    $deadline = (!empty($job_text['deadline'])) ? $job_text['deadline'] : '';
    $deadline = date('Y-m-d H:i:s', strtotime($deadline));
    $node->field_period['und'][0]['value'] = date('Y-m-d H:i:s', strtotime($job_text['published']));
    $node->field_period['und'][0]['value2'] = $deadline;

    $node = node_submit($node);
    node_save($node);

  }
}
/**
 * SOAP function GetProjects.
 */
function _ofir_job_index_integration_GetProjects($wsdl, $api_key, $media_id) {
  if (empty($wsdl) || empty($api_key) || empty($media_id)) {
    return array();
  }
  $errors = array();
  // Then we can start using a new soap-client to get jobs.
  $client = new SoapClient($wsdl, array('exceptions' => 0));
  $result_list = $client->GetProjects(array('mediaId' => $media_id, 'apiKey' => $api_key));
  if (is_soap_fault($result_list)) {
    $errors = array(
      'error_code' => $result_list->faultcode,
      'error_string' => $result_list->faultstring,
    );
    return $errors;
  }

  $jobs = array();
  // Then we get the result-list from the specified webservice.
  $job_list = $result_list->GetProjectsResult;
  if (is_soap_fault($job_list)) {
    $errors = array(
      'error_code' => $job_list->faultcode,
      'error_string' => $job_list->faultstring,
    );
    return $errors;
  }
  else {

    // Now we step through all the fetched job and convert them to arrays
    // of wanted field-sets.
    $any = isset($job_list->any) ? $job_list->any : '';
    if (!empty($any)) {
      $doc = new DOMDocument('1.0', 'UTF-8');
      $doc->strictErrorChecking = FALSE;
      @$doc->loadHTML('<?xml encoding="UTF-8">' . $any);
      $xml = simplexml_import_dom($doc);

      $projects = $xml->body->root->project;
      foreach ($projects as $id => $job) {
        $jobs[] = $job;
      }
    }
  }
  return $jobs;
}


/**
 * Function _ofir_job_index_integration_parse_job_text().
 */
function _ofir_job_index_integration_parse_job_text($xml) {
  // This function can parse a ofir job XML-feed and extract
  // all the field values we want for our Drupal-nodes.
  $ofir_job['title'] = $xml->ad->header;
  $ofir_job['ad_id'] = _ofir_job_index_integration_xml_attribute($xml->ad, 'id');
  $ofir_job['published'] = _ofir_job_index_integration_xml_attribute($xml, 'published');
  $ofir_job['deadline'] = _ofir_job_index_integration_xml_attribute($xml, 'deadline');
  $ofir_job['description'] = _ofir_job_index_integration_convert_char((string) $xml->ad->description);
  $ofir_job['department_name'] = _ofir_job_index_integration_xml_attribute($xml, 'department_name');
  $apply_link = _ofir_job_index_integration_xml_attribute($xml, 'apply_link');
  $apply_link = str_replace('vacancyAd', 'vacancyapply', $apply_link);
  $ofir_job['apply_link'] = $apply_link;

  $ofir_job['category'] = (string) $xml->ad->facts->fact;
  $ofir_job['contact_person'] = (string) $xml->ad->facts->fact[3];
  $ofir_job['contact_no'] = (string) $xml->ad->facts->fact[4];
  return $ofir_job;
}

/**
 * Check job is existed.
 *
 * @param Object $job
 *   SimpleXMLElement Object
 */
function _ofir_job_index_integration_check_existed($job) {
  if (!is_object($job)) {
    return FALSE;
  }
  $ad_id = _ofir_job_index_integration_xml_attribute($job->ad, 'id');
  if ($ad_id) {
    $status = db_query('SELECT entity_id FROM {field_data_field_ofir_job_ad_id} WHERE field_ofir_job_ad_id_value = :ad_id', array(
              ':ad_id' => $ad_id))->fetchField();
    if (empty($status)) {
      return FALSE;
    }
    else {
      return TRUE;
    }
  }
  return FALSE;
}
/**
 * Get xml attribute.
 */
function _ofir_job_index_integration_xml_attribute($object, $attribute) {
  if (isset($object[$attribute])) {
    return (string) $object[$attribute];
  }
}
/**
 * Convert char in job description.
 */
function _ofir_job_index_integration_convert_char($string) {

  $find = array("&amp;Aelig;", "&amp;aelig;", "&amp;Aring;", "&amp;aring;", "&amp;Oslash;",
    "&amp;oslash;", "&#39;", "&eacute;", '&lt;', '&gt;', '&amp;nbsp;', '&amp;rdquo;', '&quot;');
  $replace = array('Æ', 'æ', 'Å', 'å', 'Ø', 'ø',
    "'", 'é', '<', '>', ' ', '"', '"');
  $string = str_replace($find, $replace, $string);
  return $string;
}
